const n = 10
const size = 300
const wid = size / n
let y = 0

function setup() {
  createCanvas(800, 800, WEBGL);
  this.b = new cube()
  
}

function draw() {
  let locX = mouseX - height / 2;
  let locY = mouseY - width / 2;
  lights();
  lights();
  background(255)
  rotateX(-PI/7)
  rotateY(y++/10)
  console.log(frameRate())
  this.b.show()
}



class block {
  constructor(p) {
    this.colors = new Array(6);
    //top, bottom, left, right, front, back
    this.showblack = false;
    this.pos = p;
    this.setcolor();
  }
  setcolor() {
    for (let i = 0; i < 6; i++) {
      this.colors[i] = color(0);
    }
    if (this.pos.y === 0) this.colors[0] = color(255);
    if (this.pos.y === n - 1) this.colors[1] = color(255, 255, 0);
    if (this.pos.x === 0) this.colors[2] = color(255, 140, 0);
    if (this.pos.x === n - 1) this.colors[3] = color(255, 0, 0);
    if (this.pos.z === n - 1) this.colors[4] = color(0, 255, 0)
    if (this.pos.z === 0) this.colors[5] = color(0, 0, 255);
  }
  show() {
    fill(0)
    noStroke()
    ambientMaterial(0)
    box(wid)
    for (let i = 0; i < 6; i++) this.drawface(i, this.colors[i]);
  }
  toggle() {
    this.showblack = !this.showblack;
  }
  drawface(f, c) {
    if (c === (color(0))) return;
    let w = wid*0.9
    fill(c);
    noStroke()
    ambientMaterial(c);
    push()
    switch (f) {
      case 0:
        //top
        translate(0,-wid/2-1,0)
        rotateX(PI / 2)
        plane(w, w)
        break;
      case 1:
        //bottom
        translate(0,+wid/2+1,0)
        rotateX(-PI / 2)
        plane(w, w)
        break;
      case 2:
        //left
        translate(-wid/2-1,0,0)
        rotateY(PI / 2)
        plane(w, w)
        break;
      case 3:
        //right
        translate(+wid/2+1,0,0)
        rotateY(PI / 2)
        plane(w, w)
        break;
      case 4:
        //front
        translate(0,0,wid/2+1)
        plane(w, w)
        break;
      case 5:
        //back
        translate(0,0,-wid/2-1)
        plane(w, w)
        break
    }
    pop()

  }
}
class cube {
  constructor() {
    this.turning = false;
    this.clockwise = false;
    this.rwhole = false;
    this.scramble = false;
    this.raxis = 0;
    this.moves = 0;
    this.angle = 0;
    this.tindex = 0;
    this.blocks = new Array(n);
    for (let i = 0; i < n; i++) {
      this.blocks[i] = new Array(n);
      for (let j = 0; j < n; j++) {
        this.blocks[i][j] = new Array(n);
        for (let k = 0; k < n; k++) {
          this.blocks[i][j][k] = new block(createVector(i, j, k));
        }
      }
    }
  }
  show() {
    // let rev= (clockwise)?1:-1;
    for (let i = 0; i < n; i++) {
      for (let j = 0; j < n; j++) {
        for (let k = 0; k < n; k++) {
          if((i!==0&&i!==n-1)&&(j!==0&&j!==n-1)&&(k!==0&&k!==n-1))continue
          push();
          let m = (n - 1) / 2.0;
          translate((i - m) * wid, (j - m) * wid, (k - m) * wid);
          this.blocks[i][j][k].show();
          pop();
        }
      }
    }
  }
}
