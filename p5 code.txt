const n =3
const size = 400
const wid = size/n
let y = 0
function setup() {
  createCanvas(800, 800, WEBGL);
  this.b = new cube()
}

function draw() {
  background(220);
  console.log(frameRate())
  rotateX(-PI/6)
  rotateY(y)
  this.b.show()
  y+=0.02 
}


class block{
  constructor(p){
    this.colors = new Array(6);
  //top, bottom, left, right, front, back
    this.showblack = false;
    this.pos = p;
    this.setcolor();
  }
  setcolor(){
    for(let i = 0; i < 6; i++){
      this.colors[i] = color(0);
    }
    if(this.pos.y===0)this.colors[0]=color(255);
    if(this.pos.y===n-1)this.colors[1]=color(255, 255, 0);
    if(this.pos.x===0)this.colors[2]=color(255, 140, 0);
    if(this.pos.x===n-1)this.colors[3]=color(255, 0, 0);
    if(this.pos.z===n-1)this.colors[4]=color(0, 255, 0)
    if(this.pos.z===0)this.colors[5]=color(0, 0, 255);
  }
  show(){
    for(let i = 0; i < 6;i++)this.drawface(i,this.colors[i]);
  }
  toggle(){
    this.showblack = !this.showblack;
  }
  drawface(f,c){
     if(c===(color(0))&&!this.showblack)return;
     fill(c);
     stroke(0);
     strokeWeight(10);
     switch(f){
    case 0:
      //top
      beginShape();
      this.addVertex(0, 0, 1);
      this.addVertex(0, 0, 0);
      this.addVertex(1, 0, 0);
      this.addVertex(1, 0, 1);
      endShape(CLOSE);
      break;
    case 1:
      //bottom
      beginShape();
      this.addVertex(0, 1, 1);
      this.addVertex(0, 1, 0);
      this.addVertex(1, 1, 0);
      this.addVertex(1, 1, 1);
      endShape(CLOSE);
      break; 
    case 2:
      //left
      beginShape();
      this.addVertex(0, 0, 1);
      this.addVertex(0, 0, 0);
      this.addVertex(0, 1, 0);
      this.addVertex(0, 1, 1);
      endShape(CLOSE);
      break;
    case 3:
      //right
      beginShape();
      this.addVertex(1, 0, 1);
      this.addVertex(1, 0, 0);
      this.addVertex(1, 1, 0);
      this.addVertex(1, 1, 1);
      endShape(CLOSE);
      break;
    case 4:
      //front
      beginShape();
      this.addVertex(0, 0, 1);
      this.addVertex(1, 0, 1);
      this.addVertex(1, 1, 1);
      this.addVertex(0, 1, 1);
      endShape(CLOSE);
      break;
    case 5:
      //back
      beginShape();
      this.addVertex(0, 0, 0);
      this.addVertex(1, 0, 0);
      this.addVertex(1, 1, 0);
      this.addVertex(0, 1, 0);
      endShape(CLOSE);
      break;
    
    }
   
   }
   addVertex(x,y,z) {
    vertex((x-0.5)*wid, (y-0.5)*wid, (z-0.5)*wid);
   }
}
class cube {
  constructor() {
    this.turning = false;
    this.clockwise = false;
    this.rwhole = false;
    this.scramble = false;
    this.raxis = 0; 
    this.moves = 0;
    this.angle = 0;
    this.tindex = 0;
    this.blocks = new Array(n);
    for (let i = 0; i< n; i++) {
      this.blocks[i]=new Array(n);
      for (let j = 0; j< n; j++) {
        this.blocks[i][j]=new Array(n);
        for (let k = 0; k< n; k++) {
          this.blocks[i][j][k] = new block(createVector(i, j, k));
        }
      }
    }
  }
show() {
    // let rev= (clockwise)?1:-1;
    for (let i = 0; i< n; i++) { 
      for (let j = 0; j< n; j++) { 
        for (let k = 0; k< n; k++) {
          push();
          // if (turning && (rwhole || mp.containsKey(blocks[i][j][k]))) {
          //   switch(raxis) {
          //   case 0:
          //     rotateX(rev*angle);
          //     break;
          //   case 1:
          //     rotateY(rev*angle);
          //     break;
          //   case 2:
          //     rotateZ(rev*angle);
          //     break;
          //   }
          // }
          let m =(n-1)/2.0;
          translate((i-m)*wid, (j-m)*wid, (k-m)*wid);
          this.blocks[i][j][k].show();
          pop();
        }
      }
    }
  }
}


